
import { useState } from "react";
import { VoucherType } from "@/types/definitions";
import { v4 as uuid } from "uuid";
import { toast } from "sonner";

// بيانات تجريبية لأنواع القيود
const initialVoucherTypes: VoucherType[] = [
  {
    id: uuid(),
    code: "JV",
    name: "قيد يومية",
    description: "قيود اليومية العامة",
    isAutoGenerated: true,
    isSystem: true,
  },
  {
    id: uuid(),
    code: "INV",
    name: "فاتورة مبيعات",
    description: "قيود فواتير المبيعات",
    isAutoGenerated: true,
    isSystem: true,
  },
  {
    id: uuid(),
    code: "REC",
    name: "سند قبض",
    description: "سندات قبض من العملاء",
    isAutoGenerated: true,
    isSystem: true,
  },
  {
    id: uuid(),
    code: "PAY",
    name: "سند صرف",
    description: "سندات صرف للموردين",
    isAutoGenerated: true,
    isSystem: true,
  },
  {
    id: uuid(),
    code: "PINV",
    name: "فاتورة مشتريات",
    description: "قيود فواتير المشتريات",
    isAutoGenerated: true,
    isSystem: true,
  },
  {
    id: uuid(),
    code: "ADJ",
    name: "تسويات",
    description: "قيود التسويات المحاسبية",
    isAutoGenerated: false,
    isSystem: false,
  },
];

export const useVoucherTypes = () => {
  const [voucherTypes, setVoucherTypes] = useState<VoucherType[]>(initialVoucherTypes);
  const [isLoading, setIsLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedVoucherType, setSelectedVoucherType] = useState<VoucherType | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);

  // البحث في أنواع القيود
  const filteredVoucherTypes = voucherTypes.filter(
    (voucherType) =>
      voucherType.name.includes(searchTerm) ||
      voucherType.code.includes(searchTerm) ||
      (voucherType.description && voucherType.description.includes(searchTerm))
  );

  // إضافة نوع قيد جديد
  const createVoucherType = (voucherType: Omit<VoucherType, "id">) => {
    // التحقق من تكرار الكود
    if (voucherTypes.some(vt => vt.code === voucherType.code)) {
      toast.error("كود نوع القيد موجود مسبقاً");
      return false;
    }
    
    setIsLoading(true);
    setTimeout(() => {
      const newVoucherType: VoucherType = {
        ...voucherType,
        id: uuid(),
      };
      setVoucherTypes([...voucherTypes, newVoucherType]);
      setIsLoading(false);
      toast.success("تم إضافة نوع القيد بنجاح");
    }, 500);
    
    return true;
  };

  // تعديل نوع قيد موجود
  const updateVoucherType = (id: string, updates: Partial<VoucherType>) => {
    const voucherType = voucherTypes.find(vt => vt.id === id);
    
    // لا يمكن تعديل أنواع القيود النظامية
    if (voucherType?.isSystem) {
      // يمكن تعديل الوصف فقط للأنواع النظامية
      if (Object.keys(updates).some(key => key !== 'description')) {
        toast.error("لا يمكن تعديل بيانات نوع القيد النظامي");
        return false;
      }
    }
    
    // التحقق من تكرار الكود
    if (updates.code && voucherTypes.some(vt => vt.code === updates.code && vt.id !== id)) {
      toast.error("كود نوع القيد موجود مسبقاً");
      return false;
    }
    
    setIsLoading(true);
    setTimeout(() => {
      setVoucherTypes(
        voucherTypes.map((vt) =>
          vt.id === id
            ? { ...vt, ...updates }
            : vt
        )
      );
      setIsLoading(false);
      toast.success("تم تحديث بيانات نوع القيد بنجاح");
    }, 500);
    
    return true;
  };

  // حذف نوع قيد
  const deleteVoucherType = (id: string) => {
    const voucherType = voucherTypes.find(vt => vt.id === id);
    
    // لا يمكن حذف أنواع القيود النظامية
    if (voucherType?.isSystem) {
      toast.error("لا يمكن حذف نوع القيد النظامي");
      return false;
    }
    
    setIsLoading(true);
    setTimeout(() => {
      setVoucherTypes(voucherTypes.filter((vt) => vt.id !== id));
      setIsLoading(false);
      toast.success("تم حذف نوع القيد بنجاح");
    }, 500);
    
    return true;
  };

  return {
    voucherTypes,
    filteredVoucherTypes,
    isLoading,
    searchTerm,
    setSearchTerm,
    selectedVoucherType,
    setSelectedVoucherType,
    isCreateDialogOpen,
    setIsCreateDialogOpen,
    isEditDialogOpen,
    setIsEditDialogOpen,
    isDeleteDialogOpen,
    setIsDeleteDialogOpen,
    createVoucherType,
    updateVoucherType,
    deleteVoucherType,
  };
};
