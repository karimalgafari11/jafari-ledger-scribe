// Add FiltersType export
export interface FiltersType {
  userId: string;
  startDate?: Date;
  endDate?: Date;
  action?: string;
  module?: string;
  status?: 'success' | 'failed' | 'warning' | 'info' | '';
  searchText?: string;
}

// Updated Bank interface with additional fields used in the components
export interface Bank {
  id: string;
  name: string;
  code: string;
  branch?: string;
  branchName?: string;
  address?: string;
  swiftCode?: string;
  iban?: string;
  accountNumber?: string;
  accountId?: string;
  currency?: string;
  isActive: boolean;
}

// Updated Branch interface with additional fields used in the components
export interface Branch {
  id: string;
  code: string;
  name: string;
  address?: string;
  phone?: string;
  email?: string;
  manager?: string;
  isActive: boolean;
  isMain: boolean;
  isMainBranch?: boolean;
  createdAt?: Date;
  updatedAt?: Date;
}

// Updated CashRegister interface with all fields used in components
export interface CashRegister {
  id: string;
  name: string;
  code: string;
  branchId: string;
  branchName?: string;
  balance: number;
  isActive: boolean;
  userId?: string;
  currency: string;
  currencyId?: string;  // Add this to support both currency and currencyId
  currencyCode?: string;
  notes?: string;
}

// Updated Warehouse interface with additional fields used in components
export interface Warehouse {
  id: string;
  code: string;
  name: string;
  branchId: string;
  address?: string;
  manager?: string;
  phone?: string;
  isActive: boolean;
  branchName?: string;
  type: 'main' | 'sub' | 'external';
  inventoryControl: boolean;
  createdAt?: Date;
  updatedAt?: Date;
}

// Updated Discount interface with additional fields used in components
export interface Discount {
  id: string;
  code: string;
  name: string;
  type: 'percentage' | 'fixed' | 'tiered';
  value: number;
  isActive: boolean;
  startDate?: Date;
  endDate?: Date;
  minAmount?: number;
  maxAmount?: number;
  minimumAmount?: number; // Alias for minAmount
  maximumAmount?: number; // Alias for maxAmount
  limitPerCustomer?: number;
  customerGroups?: string[];
  productCategories?: string[];
  excludedProducts?: string[];
  applicableCategories?: string[];
}

// Updated AccountingPeriod interface with additional fields
export interface AccountingPeriod {
  id: string;
  name: string;
  startDate: Date;
  endDate: Date;
  isClosed: boolean;
  closedBy?: string;
  closedAt?: Date;
  closedDate?: Date; // Alias for closedAt
  fiscalYearId?: string;
}

// Updated CommercialPaper interface with additional fields
export interface CommercialPaper {
  id: string;
  type: 'check' | 'bond' | 'bill' | 'cheque' | 'promissory_note';
  number: string;
  referenceNumber?: string;
  amount: number;
  currencyCode: string;
  currencyId?: string;
  issueDate: Date;
  dueDate: Date;
  status: 'draft' | 'active' | 'collected' | 'bounced' | 'void';
  bankId?: string;
  bankName?: string;
  customerId?: string;
  customerName?: string;
  vendorName?: string;
  notes?: string;
}

// Updated DueNotification interface with additional fields
export interface DueNotification {
  id: string;
  paperId?: string;
  entityId?: string;
  entityType?: string;
  paperNumber?: string;
  dueDate: Date;
  amount: number;
  currencyId?: string;
  title?: string;
  message?: string;
  priority?: 'high' | 'medium' | 'low';
  status: 'pending' | 'sent' | 'failed' | 'processed' | 'dismissed';
  sentAt?: Date;
  notificationDate?: Date;
}

// Keep existing interfaces
export interface Currency {
  id: string;
  code: string;
  name: string;
  symbol: string;
  isDefault: boolean;
  isActive: boolean;
  exchangeRate: number;
  decimalPlaces: number;
  country?: string;
}

export interface ExchangeRate {
  id: string;
  sourceCurrencyId: string;
  targetCurrencyId: string;
  rate: number;
  date: string;
  isManual: boolean;
}

export interface VoucherType {
  id: string;
  code: string;
  name: string;
  description?: string;
  isAutoGenerated: boolean;
  isSystem: boolean;
}

export interface PaymentMethod {
  id: string;
  code: string;
  name: string;
  description?: string;
  isActive: boolean;
  requiresDetails: boolean;
}

export interface SalesRepresentative {
  id: string;
  code: string;
  name: string;
  phone: string;
  email: string;
  commissionRate: number;
  isActive: boolean;
  branchIds: string[];
}
